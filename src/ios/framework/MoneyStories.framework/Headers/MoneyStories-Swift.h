#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef MONEYSTORIES_SWIFT_H
#define MONEYSTORIES_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoneyStories",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class SharedAnalyticsData;

SWIFT_PROTOCOL("_TtP12MoneyStories21AnalyticsEventHandler_")
@protocol AnalyticsEventHandler
/// Called async (lower QOS) on every event data trigger (maybe several times at once).
/// Just store it. Any more task must run separately.
/// \param event Event data
///
- (void)handleEvent:(SharedAnalyticsData * _Nonnull)event;
@end


/// Confront this protocol to handle auth errors (401)
SWIFT_PROTOCOL("_TtP12MoneyStories31AuthenticationTokenErrorHandler_")
@protocol AuthenticationTokenErrorHandler
/// Recommended flow when called:
/// 1.: request new/refresh token for same user (SDK started with),
/// 2.: authenticate with new token,
/// 3.: call completion to retry failed SDK request with new token.
/// On failed refresh required to call also completion.
/// Retry must reach the limit to handle error on UI. (Retry limit is 2)
- (void)handleInvalidTokenWithCompletion:(void (^ _Nonnull)(void))completion;
@end

@class NSString;

SWIFT_PROTOCOL("_TtP12MoneyStories10Credential_")
@protocol Credential
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
@end


/// A Token class for Bearer Token Authentication
SWIFT_CLASS("_TtC12MoneyStories11BearerToken")
@interface BearerToken : NSObject <Credential>
/// Designated optional constructor storing a string as the inner token.
/// throws on empty string and invalid token format(test decoded)
/// \param token The token to be used by this instance.
///
- (nullable instancetype)initWithToken:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Returns the stirng representation of this Token.
///
/// returns:
/// The stirng representation of this Token.
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSURL;
@class NSData;

/// /// A class used to create valid configuration for a MoneyStories module instance.
SWIFT_CLASS("_TtC12MoneyStories13ConfigBuilder")
@interface ConfigBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Makes the MoneyStories instance to run in debug mode providing more detailed log output and making debugging more comfortable.
///
/// returns:
/// The builder updated with the additional information.
- (ConfigBuilder * _Nonnull)withDebugEnabled SWIFT_WARN_UNUSED_RESULT;
/// Makes the MoneyStories instance to use the given baseUrl
/// \param url Base url to use for communication
///
///
/// returns:
/// The builder updated with the additional information.
- (ConfigBuilder * _Nonnull)withBaseUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Makes the MoneyStories instance to use the given language code
/// \param url Language code in ISO 639-1 format (“en”)
///
///
/// returns:
/// The builder updated with the additional information.
- (ConfigBuilder * _Nonnull)withLanguageCode:(NSString * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Makes the MoneyStories instance to use pinned certificates.
/// \code
/// NSString *rootCaPath = [NSBundle.mainBundle pathForResource:@"wup_ca" ofType:@"cer"];
/// NSData *rootCaData = [NSData dataWithContentsOfFile:rootCaPath];
/// NSArray certificates = @[rootCaData];
///
/// \endcode\param host Host for pin certificates
///
/// \param certificates An array of certificate Data instances
///
/// \param validateCertificateChain Validate certifcate chain. Tipically, it is false, when we use self signed certificates
///
/// \param validateHost Validates host name in certificate
///
///
/// returns:
/// The builder updated with the additional information.
- (ConfigBuilder * _Nonnull)withPinnedCertificatesWithHost:(NSString * _Nonnull)host certificates:(NSArray<NSData *> * _Nonnull)certificates validateCertificateChain:(BOOL)validateCertificateChain validateHost:(BOOL)validateHost SWIFT_WARN_UNUSED_RESULT;
@end






typedef SWIFT_ENUM(NSInteger, MStoriesAuthError, open) {
  MStoriesAuthErrorEmptyInput = 0,
  MStoriesAuthErrorInvalidToken = 1,
};
static NSString * _Nonnull const MStoriesAuthErrorDomain = @"MoneyStories.MStoriesAuthError";


SWIFT_PROTOCOL("_TtP12MoneyStories21MoneyStoriesInterface_")
@protocol MoneyStoriesInterface
/// Sets up the MoneyStories module with the given configuration.
/// Calling this method is obligatory as it provides the mandatory informations for MoneyStories to work properly.
/// \param builder Configuration builder instance which will provide filled configuration object.
///
- (void)setupWithConfigBuilder:(ConfigBuilder * _Nonnull)builder;
/// Authenticates this MoneyStories module instance. Depending on the gateway configuration this may be required by
/// MoneyStories components to work properly.
/// \param withCredential A credential object that can authenticte the user towards the gateway.
///
- (void)authenticateWithCredential:(id <Credential> _Nonnull)withCredential;
/// Set authentication token error handler
/// \param instance instance which implements AuthenticationTokenErrorHandler protocol
///
- (void)setAuthenticationTokenErrorHandler:(id <AuthenticationTokenErrorHandler> _Nonnull)handler;
/// Set Analytics event handler
/// \param instance instance which implements AnalyticsEventHandler protocol
///
- (void)setAnalyticsEventHandler:(id <AnalyticsEventHandler> _Nonnull)handler;
- (void)handleNotificationWithDate:(NSString * _Nonnull)date period:(NSString * _Nonnull)period isRead:(BOOL)isRead;
@end


/// Class to propagate the default injection towards ObjectiveC classes.
/// You can create new injector at each location.
/// Note: Don’t store injectedMoneyStories object in a variable, use injector
SWIFT_CLASS("_TtC12MoneyStories24MoneyStoriesObjcInjector")
@interface MoneyStoriesObjcInjector : NSObject
- (id <MoneyStoriesInterface> _Nonnull)injectedMoneyStories SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC12MoneyStories19SharedAnalyticsData")
@interface SharedAnalyticsData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
@property (nonatomic, readonly, copy) NSString * _Nonnull functionName;
@property (nonatomic, readonly, copy) NSString * _Nonnull eventDate;
@property (nonatomic, readonly, copy) NSString * _Nonnull eventDateTimeZone;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSBundle;
@class NSCoder;

/// ViewController wrapper around the storybarview.
/// Recommended to use the original StorbarView.
SWIFT_CLASS("_TtC12MoneyStories31StoryBarContainerViewController")
@interface StoryBarContainerViewController : UIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class MoneyStoriesStoryLine;

SWIFT_PROTOCOL("_TtP12MoneyStories16StoryBarDelegate_")
@protocol StoryBarDelegate <NSObject>
- (void)storiesDidLoadWithStories:(NSArray<MoneyStoriesStoryLine *> * _Nonnull)stories;
@end


SWIFT_CLASS("_TtC12MoneyStories12StoryBarView")
@interface StoryBarView : UIView
@property (nonatomic, strong) id <StoryBarDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Call to finish initialization process and start loading UI content
- (void)startLoading;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end



/// Usage of <code>StoryBarViewModel</code>
/// <ol>
///   <li>
///     Call initialize
///   </li>
///   <li>
///     Download stories with getStoryLines
///   </li>
///   <li>
///     When an update accour by updateCompletion, update the UI
///   </li>
/// </ol>
SWIFT_PROTOCOL("_TtP12MoneyStories17StoryBarViewModel_")
@protocol StoryBarViewModel
/// Holds an array of StoryLines.
@property (nonatomic, readonly, copy) NSArray<MoneyStoriesStoryLine *> * _Nonnull storyLines;
/// Closure, which gets triggered, when a StoryLine has been updated.
@property (nonatomic, copy) void (^ _Nonnull updateCompletion)(void);
/// Initialize the StoryBarViewModel.
/// Calling this method is obligatory as it provides the mandatory informations to retrieve story lines.
///
/// returns:
/// True if the Initialize process was successfull, otherwise an error.
- (void)initializeWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Retrieves an array of story lines.
///
/// returns:
/// An array of story lines, otherwise an error.
- (void)getStoryLinesWithCompletion:(void (^ _Nonnull)(NSArray<MoneyStoriesStoryLine *> * _Nullable, NSError * _Nullable))completion;
/// Opens a story line at index.
/// \param index The index of the story line.
///
- (void)openStoryLine:(NSInteger)index;
/// Opens the more view to check all of the story lines.
- (void)openMore;
@end


/// Class to propagate the default injection towards ObjectiveC classes.
/// You can create new injector at each location.
/// Note: Don’t store injectedStoryBarViewModel object in a variable, use injector
SWIFT_CLASS("_TtC12MoneyStories29StoryBarViewModelObjcInjector")
@interface StoryBarViewModelObjcInjector : NSObject
- (id <StoryBarViewModel> _Nonnull)injectedStoryBarViewModel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;
enum StoryPeriodType : NSInteger;

/// A @objc(MoneyStoriesStoryLine) / StoryLine class for StoryBarViewModel.
SWIFT_CLASS_NAMED("StoryLine")
@interface MoneyStoriesStoryLine : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Returns the start date of this StoryLine.
///
/// returns:
/// The start date of this StoryLine.
- (NSDate * _Nonnull)getStartDate SWIFT_WARN_UNUSED_RESULT;
/// Returns the period of this StoryLine.
///
/// returns:
/// The period of this StoryLine.
- (enum StoryPeriodType)getPeriod SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPeriodString SWIFT_WARN_UNUSED_RESULT;
/// Returns the read of this StoryLine.
///
/// returns:
/// The read of this StoryLine.
- (BOOL)isRead SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum which describes story period types.
typedef SWIFT_ENUM(NSInteger, StoryPeriodType, open) {
  StoryPeriodTypeDaily = 0,
  StoryPeriodTypeWeekly = 1,
  StoryPeriodTypeMonthly = 2,
  StoryPeriodTypeYearly = 3,
/// A fallback story period type for objc, due to this enum could be optional.
  StoryPeriodTypeNotset = 4,
};

















#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
